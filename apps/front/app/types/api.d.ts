/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["AppController_getHello"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get token information */
        get: operations["UsersController_getMe"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/signup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a new user */
        post: operations["UsersController_createUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get auth token */
        post: operations["UsersController_login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Information about user */
        get: operations["UsersController_getUser"];
        put?: never;
        post?: never;
        /** Deleted a new user */
        delete: operations["UsersController_deleteUser"];
        options?: never;
        head?: never;
        /** Update user */
        patch: operations["UsersController_updateUser"];
        trace?: never;
    };
    "/wallets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List wallets */
        get: operations["WalletsController_getWallets"];
        put?: never;
        /** Create a new wallet */
        post: operations["WalletsController_createWallet"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/wallets/{walletId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List wallets */
        get: operations["WalletsController_getWallet"];
        /** Update wallet */
        put: operations["WalletsController_updateWallet"];
        post?: never;
        /** Delete wallet */
        delete: operations["WalletsController_deleteWallet"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        UserResponseDto: {
            /**
             * @description The id of the User
             * @example iudjashd-12312-12312-12312
             */
            id: string;
            /**
             * @description The first name of the User
             * @example John
             */
            name: string;
            /**
             * @description The email of the User
             * @example t@t.com
             */
            email: string;
            /**
             * @description The last name of the User
             * @example Doe
             */
            lastName: string;
            /**
             * Format: date-time
             * @description When user was created
             * @example Doe
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description The last update of the User
             * @example
             */
            updatedAt: string;
            /**
             * @description The token of the User
             * @example some-jwt-token
             */
            accessToken: string;
        };
        CreateUserDto: {
            /**
             * @description The email of the User
             * @example t@t.com
             */
            email: string;
            /**
             * @description The password of the User
             * @example myPassw0rd!
             */
            password: string;
            /**
             * @description The first name of the User
             * @example John
             */
            name: string;
            /**
             * @description The last name of the User
             * @example Doe
             */
            lastName: string;
        };
        LoginUserDto: {
            /**
             * @description The username of the User
             * @example t@t.com
             */
            username: string;
            /**
             * @description The password of the User
             * @example myPassw0rd!
             */
            password: string;
        };
        ErrorResponseDto: {
            /** @example 401 */
            statusCode: number;
            /** @example Unauthorized */
            error: string;
            /** @example Invalid password or username */
            message: string;
        };
        UpdateUserDto: {
            /**
             * @description The first name of the User
             * @example John
             */
            name?: string;
            /**
             * @description The last name of the User
             * @example Doe
             */
            lastName?: string;
        };
        CreateWalletDto: {
            /**
             * @description The name of the Wallet
             * @example My Wallet
             */
            name: string;
        };
        WalletResponseDto: {
            /**
             * @description The id of the Wallet
             * @example 1a2b3c4d5e6f7g8h9i0j
             */
            id: string;
            /**
             * @description The name of the Wallet
             * @example My Wallet
             */
            name: string;
            /**
             * Format: date-time
             * @description The date of the Wallet was created
             * @example 2025-09-20T20:49:42.663Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description The date of the Wallet was updated
             * @example 2025-09-20T20:49:42.663Z
             */
            updatedAt: string;
        };
        WalletsListResponseDto: {
            /** @description List of wallets */
            items: components["schemas"]["WalletResponseDto"][];
            /**
             * @description Pagination metadata
             * @example {
             *       "totalItems": 100,
             *       "itemCount": 10,
             *       "itemsPerPage": 10,
             *       "totalPages": 10
             *     }
             */
            metadata: Record<string, never>;
        };
        UpdateWalletDto: {
            /**
             * @description The name of the Wallet
             * @example My Wallet
             */
            name?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    AppController_getHello: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UsersController_getMe: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponseDto"];
                };
            };
        };
    };
    UsersController_createUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateUserDto"];
            };
        };
        responses: {
            /** @description The user created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponseDto"];
                };
            };
            /** @description Invalid data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UsersController_login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginUserDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponseDto"];
                };
            };
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponseDto"];
                };
            };
        };
    };
    UsersController_getUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponseDto"];
                };
            };
        };
    };
    UsersController_deleteUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The user created */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponseDto"];
                };
            };
        };
    };
    UsersController_updateUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateUserDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponseDto"];
                };
            };
        };
    };
    WalletsController_getWallets: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The found records */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WalletsListResponseDto"];
                };
            };
            /** @description Wallet not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    WalletsController_createWallet: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateWalletDto"];
            };
        };
        responses: {
            /** @description The wallet created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WalletResponseDto"];
                };
            };
            /** @description Invalid data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    WalletsController_getWallet: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the wallet */
                walletId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The found record */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WalletResponseDto"];
                };
            };
            /** @description Wallet not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    WalletsController_updateWallet: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the wallet */
                walletId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateWalletDto"];
            };
        };
        responses: {
            /** @description The updated record */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WalletsListResponseDto"];
                };
            };
            /** @description Wallet not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    WalletsController_deleteWallet: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the wallet */
                walletId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success deleted record */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Wallet not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
